import { NextFunction, Request, Response } from "express";
import dotenv from "dotenv";
import jwt from "jsonwebtoken";
import bcrypt from "bcryptjs";
import { sql, poolPromise } from "../config/database";
import { sendEmail } from "./mailController";
import { welcomeTemplate } from "../templates/welcome";
import { passwordReset } from "../templates/passwordreset";
dotenv.config();

/**
 * X√°c th·ª±c ng∆∞·ªùi d√πng v√† t·∫°o m√£ th√¥ng b√°o JWT
 * 
 * @route POST /api/auth/login
 * @access Public
 * @param {Request} req - ƒê·ªëi t∆∞·ª£ng request c·ªßa Express ch·ª©a email v√† m·∫≠t kh·∫©u trong body
 * @param {Response} res - ƒê·ªëi t∆∞·ª£ng response c·ªßa Express
 * @param {NextFunction} next - H√†m middleware ti·∫øp theo c·ªßa Express
 * @returns {Promise<void>} Ph·∫£n h·ªìi JSON ch·ª©a m√£ th√¥ng b√°o v√† d·ªØ li·ªáu ng∆∞·ªùi d√πng
 * @throws {400} N·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
 * @throws {401} N·∫øu m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá
 * @throws {500} N·∫øu x·∫£y ra l·ªói m√°y ch·ªß
 */
export async function login(
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> {
  const { email, password } = req.body;

  try {
    // L·∫•y k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu v√† t√¨m ng∆∞·ªùi d√πng theo email
    const pool = await poolPromise;
    const result = await pool
      .request()
      .input("email", sql.NVarChar, email)
      .query("SELECT Account.*, Role.RoleName FROM Account JOIN Role ON Account.RoleID = Role.RoleID WHERE Email = @email");
    const user = result.recordset[0];

    // Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
    if (!user) {
      res.status(400).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
      return;
    }

    // X√°c th·ª±c m·∫≠t kh·∫©u
    const isMatch = await bcrypt.compare(password, user.Password);
    if (!isMatch) {
      res.status(401).json({ message: "M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá" });
      return;
    }
    
    // T·∫°o m√£ th√¥ng b√°o JWT
    const token = jwt.sign(
      { 
        user: { 
          AccountID: user.AccountID,
          Username: user.Username,
          Email: user.Email,
          FullName: user.FullName,
          RoleID: user.RoleID, // S·ª≠ d·ª•ng RoleID thay v√¨ Role
          RoleName: user.RoleName, // Bao g·ªìm RoleName cho ti·ªán l·ª£i
          CreatedAt: user.CreatedAt,
          IsDisabled: user.IsDisabled
        }
      },
      process.env.JWT_SECRET as string,
      { expiresIn: "1h" }
    );

      res.status(200).json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      token,
      user: { 
        AccountID: user.AccountID,
        Username: user.Username,
        Email: user.Email,
        FullName: user.FullName,
        RoleID: user.RoleID,
        RoleName: user.RoleName,
        CreatedAt: user.CreatedAt,
        IsDisabled: user.IsDisabled
      }
    });

  } catch (err: any) {
    console.error(err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
}

/**
 * X·ª≠ l√Ω ƒëƒÉng xu·∫•t ng∆∞·ªùi d√πng
 * V√¨ JWT l√† tr·∫°ng th√°i kh√¥ng, ƒëi·ªÉm n√†y ch·ªß y·∫øu ph·ª•c v·ª• cho vi·ªác d·ªçn d·∫πp ph√≠a kh√°ch h√†ng
 * 
 * @route POST /api/auth/logout
 * @access Public
 * @returns {Promise<void>} Th√¥ng b√°o th√†nh c√¥ng
 */
export async function logout(
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> {
  try {
    // V√¨ JWT l√† tr·∫°ng th√°i kh√¥ng, ƒëƒÉng xu·∫•t ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü ph√≠a kh√°ch h√†ng b·∫±ng c√°ch x√≥a m√£ th√¥ng b√°o
    res.status(200).json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng" });
  } catch (err: any) {
    console.error(err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
}

/**
 * ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi v√†o h·ªá th·ªëng
 * 
 * @route POST /api/auth/register
 * @access Public
 * @param {Request} req - ƒê·ªëi t∆∞·ª£ng request c·ªßa Express ch·ª©a th√¥ng tin ƒëƒÉng k√Ω trong body
 * @returns {Promise<void>} Th√¥ng b√°o th√†nh c√¥ng
 * @throws {400} N·∫øu t√™n ƒëƒÉng nh·∫≠p ho·∫∑c email ƒë√£ t·ªìn t·∫°i
 * @throws {500} N·∫øu x·∫£y ra l·ªói m√°y ch·ªß
 */
export async function register(
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> {
  const { username, password, email, fullName, dateOfBirth, roleName } = req.body;

  try {
    const pool = await poolPromise;

    // Ki·ªÉm tra t√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i ch∆∞a
    const checkUser = await pool
      .request()
      .input("username", sql.NVarChar, username)
      .query("SELECT * FROM Account WHERE Username = @username");
    if (checkUser.recordset.length > 0) {
      res.status(400).json({ message: "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i" });
      return;
    }

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const checkEmail = await pool
      .request()
      .input("email", sql.NVarChar, email)
      .query("SELECT * FROM Account WHERE Email = @email");
    if (checkEmail.recordset.length > 0) {
      res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
      return;
    }

    // L·∫•y RoleID cho vai tr√≤ m·∫∑c ƒë·ªãnh "Member"
    const roleResult = await pool
      .request()
      .input("roleName", sql.NVarChar, "Member")
      .query("SELECT RoleID FROM Role WHERE RoleName = @roleName");
    const role = roleResult.recordset[0];
    if (!role) {
      res.status(500).json({ message: "Kh√¥ng t√¨m th·∫•y vai tr√≤ 'Member' trong b·∫£ng Role" });
      return;
    }

    // M√£ h√≥a m·∫≠t kh·∫©u ƒë·ªÉ b·∫£o m·∫≠t
    const hashedPassword = await bcrypt.hash(password, 10);

    // Th√™m ng∆∞·ªùi d√πng m·ªõi v√†o c∆° s·ªü d·ªØ li·ªáu
    await pool
      .request()
      .input("username", sql.NVarChar, username)
      .input("email", sql.NVarChar, email)
      .input("password", sql.NVarChar, hashedPassword)
      .input("fullName", sql.NVarChar, fullName)
      .input("dateOfBirth", sql.Date, dateOfBirth)
      .input("roleID", sql.Int, role.RoleID)
      .input("createdAt", sql.DateTime2, new Date())
      .query(
        `INSERT INTO Account 
                (Username, Email, Password, FullName, DateOfBirth, RoleID, CreatedAt) 
                VALUES 
                (@username, @email, @password, @fullName, @dateOfBirth, @roleID, @createdAt)`
      );

    // G·ª≠i email ch√†o m·ª´ng
    try {
      await sendEmail(
        email,
        "üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ª©ng d·ª•ng!",
        welcomeTemplate(fullName, username)
      );
    } catch (emailErr) {
      console.warn("G·ª≠i email th·∫•t b·∫°i:", emailErr); // L·ªói kh√¥ng nghi√™m tr·ªçng
    }

    res.status(201).json({ message: "ƒêƒÉng k√Ω ng∆∞·ªùi d√πng th√†nh c√¥ng" });
  } catch (err: any) {
    console.error(err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
}

/**
 * Kh·ªüi t·∫°o qu√° tr√¨nh qu√™n m·∫≠t kh·∫©u
 * Sinh token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u v√† g·ª≠i qua email
 * 
 * @route POST /api/auth/forgot-password
 * @access Public
 * @param {Request} req - ƒê·ªëi t∆∞·ª£ng request c·ªßa Express ch·ª©a email trong body
 * @returns {Promise<void>} Th√¥ng b√°o th√†nh c√¥ng
 * @throws {404} N·∫øu kh√¥ng t√¨m th·∫•y email
 * @throws {500} N·∫øu x·∫£y ra l·ªói m√°y ch·ªß
 */
export async function forgotPassword(req: Request, res: Response, next: NextFunction): Promise<void> {
    const { email } = req.body;

    try {
        const pool = await poolPromise;
        // Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
        const result = await pool
            .request()
            .input('email', sql.VarChar, email)
            .query('SELECT * FROM Account WHERE Email = @email');
        const user = result.recordset[0];

        if (!user) {
            res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y email" });
            return;
        }

        // Sinh token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ng·∫´u nhi√™n v√† th·ªùi h·∫°n
        const resetToken = (Math.random().toString(36).substr(2) + Date.now().toString(36));
        const resetTokenExpiry = new Date(Date.now() + 60 * 60 * 1000); // H·∫øt h·∫°n sau 1 gi·ªù

        // L∆∞u token v√†o c∆° s·ªü d·ªØ li·ªáu
        await pool.request()
            .input('userId', sql.Int, user.AccountID)
            .input('resetToken', sql.VarChar, resetToken)
            .input('resetTokenExpiry', sql.DateTime2, resetTokenExpiry)
            .query('UPDATE Account SET ResetToken = @resetToken, ResetTokenExpiry = @resetTokenExpiry WHERE AccountID = @userId');

        // T·∫°o link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u v√† g·ª≠i email
        const resetLink = `${process.env.FRONTEND_URL}/reset-password?token=${resetToken}`;
        await sendEmail(
            email,
            'üîë Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u',
            passwordReset(user.FullName, resetLink)
        );
        
        res.json({ message: "ƒê√£ g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u" });
    } catch (err: any) {
        console.error(err);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
    }
}

/**
 * Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
 * 
 * @route POST /api/auth/verify-reset-token
 * @access Public
 * @param {Request} req - ƒê·ªëi t∆∞·ª£ng request c·ªßa Express ch·ª©a token trong body
 * @returns {Promise<void>} Tr·∫°ng th√°i h·ª£p l·ªá c·ªßa token
 */
export async function postVerifyResetToken(req: Request, res: Response): Promise<void> {
    const { token } = req.body;
    if (!token) {
        res.status(400).json({ valid: false, message: "Token l√† b·∫Øt bu·ªôc" });
        return;
    }

    try {
        const pool = await poolPromise;
        const result = await pool.request()
            .input('resetToken', sql.VarChar, token)
            .query('SELECT ResetTokenExpiry FROM Account WHERE ResetToken = @resetToken');
        const user = result.recordset[0];

        if (!user) {
            res.json({ valid: false, message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
            return;
        }

        if (!user.ResetTokenExpiry || new Date(user.ResetTokenExpiry) < new Date()) {
            res.json({ valid: false, message: "Token ƒë√£ h·∫øt h·∫°n" });
            return;
        }

        res.json({ valid: true });
    } catch (err) {
        res.json({ valid: false, message: "L·ªói m√°y ch·ªß" });
    }
}

/**
 * Ho√†n t·∫•t qu√° tr√¨nh ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
 * 
 * @route POST /api/auth/reset-password
 * @access Public
 * @param {Request} req - ƒê·ªëi t∆∞·ª£ng request c·ªßa Express ch·ª©a token v√† m·∫≠t kh·∫©u m·ªõi
 * @returns {Promise<void>} Th√¥ng b√°o th√†nh c√¥ng
 * @throws {400} N·∫øu m·∫≠t kh·∫©u kh√¥ng kh·ªõp ho·∫∑c token kh√¥ng h·ª£p l·ªá
 */
export async function resetPassword(req: Request, res: Response): Promise<void> {
    const { token, newPassword, confirmPassword } = req.body;
    if (!token || !newPassword || !confirmPassword) {
        res.status(400).json({ message: "Token, m·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc" });
        return;
    }

    if (newPassword !== confirmPassword) {
        res.status(400).json({ message: "M·∫≠t kh·∫©u kh√¥ng kh·ªõp" });
        return;
    }

    try {
        const pool = await poolPromise;

        // T√¨m ng∆∞·ªùi d√πng theo token v√† ki·ªÉm tra h·∫°n s·ª≠ d·ª•ng
        const result = await pool.request()
            .input('resetToken', sql.VarChar, token)
            .query('SELECT AccountID, ResetTokenExpiry FROM Account WHERE ResetToken = @resetToken');
        const user = result.recordset[0];

        if (!user) {
            res.status(400).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
            return;
        }

        // Ki·ªÉm tra token ƒë√£ h·∫øt h·∫°n ch∆∞a
        if (!user.ResetTokenExpiry || new Date(user.ResetTokenExpiry) < new Date()) {
            res.status(400).json({ message: "Token ƒë√£ h·∫øt h·∫°n" });
            return;
        }

        // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
        const hashedPassword = await bcrypt.hash(newPassword, 10);

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u v√† x√≥a token ƒë·∫∑t l·∫°i
        await pool.request()
            .input('userId', sql.Int, user.AccountID)
            .input('password', sql.VarChar, hashedPassword)
            .query('UPDATE Account SET Password = @password, ResetToken = NULL, ResetTokenExpiry = NULL WHERE AccountID = @userId');

        res.json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng" });
    } catch (err) {
        res.status(400).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }
}